# see more about dockerfile templates here: https://www.balena.io/docs/learn/develop/dockerfile/#dockerfile-templates
# and about balena base images here: https://www.balena.io/docs/reference/base-images/base-images/


# Multiple Architectures:
    # armv5e
    # armv6
    # armv7hf
    # aarch64
    # amd64
    # i386
# Multiple Distributions:
    # Debian: stretch (9), buster (10), bullseye (11), bookworm (12) and sid
    # Alpine: 3.11, 3.12, 3.13, 3.14 and edge
    # Ubuntu: xenial (16.04), bionic (18.04), focal (20.04), hirsute (21.04) and impish (21.10)
    # Fedora: 32, 33, 34 and 35
# Multiple language stacks:
    # Node.js: 17.4.0, 16.13.2, 14.18.3 and 12.22.9
    # Python: 3.6.15, 3.7.12, 3.8.12, 3.9.10 and 3.10.2
    # openJDK: 7-jdk/jre, 8-jdk/jre, 11-jdk/jre and 16-jdk
    # Golang: 1.17.6 and 1.16.13
    # Dotnet: 6.0-sdk/runtime/aspnet, 3.1-sdk/runtime/aspnet and 5.0-sdk/runtime/aspnet
# run and build variants designed for multistage builds.
# cross-build functionality for building ARM containers on x86.
# Helpful package installer script called install_packages inspired by minideb.


# raspberrypi4-64	aarch64

# Here we can use %%BALENA_MACHINE_NAME%% or a specific name like raspberrypi4-64
# 
# FROM balenalib/raspberrypi4-64-ubuntu:latest-build
FROM balenalib/%%BALENA_MACHINE_NAME%%-ubuntu:latest-build


# use `install_packages` if you need to install dependencies,
# for instance if you need git, just uncomment the line below.
# RUN install_packages git

# Doing it the old way - probably means it's hardcoded to the dist, while install_packages is not
RUN install_packages build-essential python3-dev python3-pip git rpi.gpio-common nodejs

RUN install_packages npm

RUN install_packages python3-lgpio

ENV CACHE_BUSTER v.0.0.1

RUN node -v

RUN npm -v

# Defines our working directory in container
WORKDIR /usr/src/app

# Copies the package.json first for better cache on later pushes
COPY package*.json ./

RUN npm install raspi-rotary-encoder
# This install npm dependencies on the balena build server,
# making sure to clean up the artifacts it creates in order to reduce the image size.
RUN JOBS=MAX npm install --production --unsafe-perm && npm cache verify && rm -rf /tmp/*

# This will copy all files in our root to the working directory in the container
COPY . ./

# Enable udevd so that plugged dynamic hardware devices show up in our container.
ENV UDEV=1

# server.js will run when container starts up on the device
CMD ["npm", "start"]
